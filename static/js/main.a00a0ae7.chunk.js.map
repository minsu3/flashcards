{"version":3,"sources":["components/Header.js","components/Definition.js","components/Flashcard.js","components/FlashcardContainer.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Definition","props","def","Flashcard","definitions","this","detail","word","map","Component","FlashcardContainer","state","flashcards","currentIndex","timer","maxTime","next","nextIndex","length","setState","prev","prevIndex","setTimer","setInterval","newTime","resetTimer","handleKeyUp","event","console","log","keyCode","window","addEventListener","fetch","then","response","json","data","catch","err","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qMAUeA,EARA,kBACb,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,aACb,uBAAGC,KAAK,IAAID,UAAU,mBAAtB,YCQSE,EARE,SAACC,GACjB,OACC,6BACQA,EAAMC,MCQDC,E,iLAXZ,IAAIC,EAAcC,KAAKJ,MAAMK,OAAOF,YAAY,GAAGA,YAElD,OACE,yBAAKN,UAAU,QACXO,KAAKJ,MAAMK,OAAOC,KAClBH,EAAYI,IAAI,SAAAN,GAAG,OAAI,kBAAC,EAAD,CAAYA,IAAKA,W,GAP1BO,aCgFTC,E,2MA9EdC,MAAQ,CACPC,WAAY,GACZC,aAAc,EACdC,MAAO,GACPC,QAAS,I,EAGVC,KAAO,WACN,IAAIC,EAAY,EAAKN,MAAME,aAAe,EACtCI,EAAY,EAAKN,MAAMC,WAAWM,QACrC,EAAKC,SAAS,CAAEN,aAAcI,K,EAIhCG,KAAO,WACN,IAAIC,EAAY,EAAKV,MAAME,aAAe,EAC1C,EAAKM,SAAS,CAAEN,aAAcQ,K,EAG/BC,SAAW,WACVC,YAAY,WACX,GAAG,EAAKZ,MAAMG,MAAQ,EAAG,CACxB,IAAIU,EAAU,EAAKb,MAAMG,MAAQ,EACjC,EAAKK,SAAS,CAAEL,MAAOU,SAGvB,EAAKR,OACL,EAAKG,SAAS,CAAEL,MAAO,EAAKH,MAAMI,WAEjC,M,EAGJU,WAAa,WACZ,EAAKN,SAAS,CAAEL,MAAO,EAAKH,MAAMI,W,EAInCW,YAAc,SAACC,GACdC,QAAQC,IAAIF,EAAMG,SACI,KAAlBH,EAAMG,UACT,EAAKd,OACL,EAAKS,cAGgB,KAAlBE,EAAMG,UACT,EAAKV,OACL,EAAKK,e,mFAIc,IAAD,OACnBM,OAAOC,iBAAiB,QAAS3B,KAAKqB,aACtCO,MCzDwB,kDD0DtBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACL,EAAKlB,SAAS,CAAEP,WAAYyB,MAE5BC,MAAM,SAAAC,GAAG,OAAIX,QAAQC,IAAIU,KAC3BlC,KAAKiB,a,+BAKH,OACE,6BAEoC,IAAjCjB,KAAKM,MAAMC,WAAWM,OACnB,aACA,kBAAC,EAAD,CACFZ,OAASD,KAAKM,MAAMC,WAAWP,KAAKM,MAAME,cAC1CC,MAAQT,KAAKM,MAAMG,a,GAvEIL,aEmBlB+B,E,iLATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALU/B,aCAEgC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC,gB","file":"static/js/main.a00a0ae7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n  <nav className=\"nav-wrapper red lighten-1\">\n    <div className=\"container\">\n      <a href=\"/\" className=\"brand-logo left\">Study</a>\n    </div>\n  </nav>\n);\n\nexport default Header;\n","import React from 'react';\n\n\n// When using a functional component, \n// we need to manually pass down the props to that component\nlet Definition = (props) => {\n\treturn (\n\t\t<div>\n      \t\t{ props.def }\n\t\t</div>\n\t)\n};\n\nexport default Definition;\n","import React, { Component } from 'react';\nimport Definition from './Definition';\n\nclass Flashcard extends Component {\n  render() {\n  \tlet definitions = this.props.detail.definitions[0].definitions\n    \n    return (\n      <div className=\"card\">\n        { this.props.detail.word }\n        { definitions.map(def => <Definition def={def} />) }\n      </div>\n    )\n  }\n}\n\nexport default Flashcard;\n","import React, { Component } from \"react\";\nimport Flashcard from \"./Flashcard\";\nimport { CLIENT_URL } from \"../constants.js\";\n\nclass FlashcardContainer extends Component {\n\tstate = {\n\t\tflashcards: [],\n\t\tcurrentIndex: 0,\n\t\ttimer: 10,\n\t\tmaxTime: 10\n\t}\n\n\tnext = () => {\n\t\tlet nextIndex = this.state.currentIndex + 1;\n\t\tif (nextIndex < this.state.flashcards.length) {\n\t\t\tthis.setState({ currentIndex: nextIndex })\n\t\t}\n\t}\n\n\tprev = () => {\n\t\tlet prevIndex = this.state.currentIndex - 1;\n\t\tthis.setState({ currentIndex: prevIndex})\n\t}\n\n\tsetTimer = () => {\n\t\tsetInterval(()=> { \n\t\t\tif(this.state.timer > 0) {\n\t\t\t\tlet newTime = this.state.timer - 1\n\t\t\t\tthis.setState({ timer: newTime })\n\t\t\t} \n\t\t\t else {\n\t\t\t\tthis.next()\n\t\t\t\tthis.setState({ timer: this.state.maxTime })\n\t\t\t}\n\t\t}, 1000);\n\t}\n\n\tresetTimer = () => {\n\t\tthis.setState({ timer: this.state.maxTime });\n\t}\n\n\t// callback to be used in the event listener below \n\thandleKeyUp = (event) => {\n\t\tconsole.log(event.keyCode); //check to see what keyUp is\n\t\tif (event.keyCode === 39) {\n\t\t\tthis.next()\n\t\t\tthis.resetTimer()\n\n\t\t}\n\t\tif (event.keyCode === 37) {\n\t\t\tthis.prev()\n\t\t\tthis.resetTimer()\n\t\t}\n\t}\n\t\n\tcomponentDidMount() {\n\t\twindow.addEventListener('keyup', this.handleKeyUp)\n\t\tfetch(CLIENT_URL)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tthis.setState({ flashcards: data })\n\t\t\t})\n\t\t\t.catch(err => console.log(err))\n\t\tthis.setTimer()\n\t}\n\n\t//Render is run first \n\trender() {\n    return(\n      <div>\n        {\n        \tthis.state.flashcards.length === 0\n        \t\t? \"Loading...\"\n        \t\t: <Flashcard \n        \t\tdetail={ this.state.flashcards[this.state.currentIndex] }\n        \t\ttimer={ this.state.timer}\n  \t\t\t\t\t/>\n        }\n      </div>\n    )\n  }\n}\n\nexport default FlashcardContainer;\n\n// 1. App Component renders\n// 2. FlashContainer renders (with an empty flashcards array in state)\n// 3. Flashcard renders\n\t// displays the Loading ... message (because of the empty array above)\n// 4. FlashcardContainer triggers componentDidMount\n// 5. fetch() populates state object with data\n// 6. setState rerenders all components but now we have data to work with!\n\n\n","export const CLIENT_URL = 'https://ga-flashcards.herokuapp.com/api/words/';\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport FlashcardContainer from './components/FlashcardContainer';\n\n// 1. App Component renders\n// 2. FlashContainer renders (with an empty flashcards array in state)\n// 3. Flashcard renders\n\t\t// displays the Loading ... message (because of the empty array above)\n// 4. FlashcardContainer triggers componentDidMount\n// 5. fetch() populates state object with data\n// 6. setState rerenders all components but now we have data to work with!\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        <Header/>\n        <FlashcardContainer/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}